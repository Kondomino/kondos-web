"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-player";
exports.ids = ["vendor-chunks/react-player"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-player/lib/Player.js":
/*!*************************************************!*\
  !*** ./node_modules/react-player/lib/Player.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _reactFastCompare = _interopRequireDefault(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SEEK_ON_PLAY_EXPIRY = 5000;\nvar Player = /*#__PURE__*/ function(_Component) {\n    _inherits(Player, _Component);\n    var _super = _createSuper(Player);\n    function Player() {\n        var _this;\n        _classCallCheck(this, Player);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isReady\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isPlaying\", false);\n        _defineProperty(_assertThisInitialized(_this), \"isLoading\", true);\n        _defineProperty(_assertThisInitialized(_this), \"loadOnReady\", null);\n        _defineProperty(_assertThisInitialized(_this), \"startOnPlay\", true);\n        _defineProperty(_assertThisInitialized(_this), \"seekOnPlay\", null);\n        _defineProperty(_assertThisInitialized(_this), \"onDurationCalled\", false);\n        _defineProperty(_assertThisInitialized(_this), \"handlePlayerMount\", function(player) {\n            if (_this.player) {\n                _this.progress(); // Ensure onProgress is still called in strict mode\n                return; // Return here to prevent loading twice in strict mode\n            }\n            _this.player = player;\n            _this.player.load(_this.props.url);\n            _this.progress();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function(key) {\n            if (!_this.player) return null;\n            return _this.player[key];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"progress\", function() {\n            if (_this.props.url && _this.player && _this.isReady) {\n                var playedSeconds = _this.getCurrentTime() || 0;\n                var loadedSeconds = _this.getSecondsLoaded();\n                var duration = _this.getDuration();\n                if (duration) {\n                    var progress = {\n                        playedSeconds: playedSeconds,\n                        played: playedSeconds / duration\n                    };\n                    if (loadedSeconds !== null) {\n                        progress.loadedSeconds = loadedSeconds;\n                        progress.loaded = loadedSeconds / duration;\n                    } // Only call onProgress if values have changed\n                    if (progress.playedSeconds !== _this.prevPlayed || progress.loadedSeconds !== _this.prevLoaded) {\n                        _this.props.onProgress(progress);\n                    }\n                    _this.prevPlayed = progress.playedSeconds;\n                    _this.prevLoaded = progress.loadedSeconds;\n                }\n            }\n            _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleReady\", function() {\n            if (!_this.mounted) return;\n            _this.isReady = true;\n            _this.isLoading = false;\n            var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;\n            onReady();\n            if (!muted && volume !== null) {\n                _this.player.setVolume(volume);\n            }\n            if (_this.loadOnReady) {\n                _this.player.load(_this.loadOnReady, true);\n                _this.loadOnReady = null;\n            } else if (playing) {\n                _this.player.play();\n            }\n            _this.handleDurationCheck();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handlePlay\", function() {\n            _this.isPlaying = true;\n            _this.isLoading = false;\n            var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;\n            if (_this.startOnPlay) {\n                if (_this.player.setPlaybackRate && playbackRate !== 1) {\n                    _this.player.setPlaybackRate(playbackRate);\n                }\n                onStart();\n                _this.startOnPlay = false;\n            }\n            onPlay();\n            if (_this.seekOnPlay) {\n                _this.seekTo(_this.seekOnPlay);\n                _this.seekOnPlay = null;\n            }\n            _this.handleDurationCheck();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handlePause\", function(e) {\n            _this.isPlaying = false;\n            if (!_this.isLoading) {\n                _this.props.onPause(e);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleEnded\", function() {\n            var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;\n            if (activePlayer.loopOnEnded && loop) {\n                _this.seekTo(0);\n            }\n            if (!loop) {\n                _this.isPlaying = false;\n                onEnded();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleError\", function() {\n            var _this$props4;\n            _this.isLoading = false;\n            (_this$props4 = _this.props).onError.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleDurationCheck\", function() {\n            clearTimeout(_this.durationCheckTimeout);\n            var duration = _this.getDuration();\n            if (duration) {\n                if (!_this.onDurationCalled) {\n                    _this.props.onDuration(duration);\n                    _this.onDurationCalled = true;\n                }\n            } else {\n                _this.durationCheckTimeout = setTimeout(_this.handleDurationCheck, 100);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleLoaded\", function() {\n            // Sometimes we know loading has stopped but onReady/onPlay are never called\n            // so this provides a way for players to avoid getting stuck\n            _this.isLoading = false;\n        });\n        return _this;\n    }\n    _createClass(Player, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.mounted = true;\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                clearTimeout(this.progressTimeout);\n                clearTimeout(this.durationCheckTimeout);\n                if (this.isReady && this.props.stopOnUnmount) {\n                    this.player.stop();\n                    if (this.player.disablePIP) {\n                        this.player.disablePIP();\n                    }\n                }\n                this.mounted = false;\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this2 = this;\n                // If there isn’t a player available, don’t do anything\n                if (!this.player) {\n                    return;\n                } // Invoke player methods based on changed props\n                var _this$props5 = this.props, url = _this$props5.url, playing = _this$props5.playing, volume = _this$props5.volume, muted = _this$props5.muted, playbackRate = _this$props5.playbackRate, pip = _this$props5.pip, loop = _this$props5.loop, activePlayer = _this$props5.activePlayer, disableDeferredLoading = _this$props5.disableDeferredLoading;\n                if (!(0, _reactFastCompare[\"default\"])(prevProps.url, url)) {\n                    if (this.isLoading && !activePlayer.forceLoad && !disableDeferredLoading && !(0, _utils.isMediaStream)(url)) {\n                        console.warn(\"ReactPlayer: the attempt to load \".concat(url, \" is being deferred until the player has loaded\"));\n                        this.loadOnReady = url;\n                        return;\n                    }\n                    this.isLoading = true;\n                    this.startOnPlay = true;\n                    this.onDurationCalled = false;\n                    this.player.load(url, this.isReady);\n                }\n                if (!prevProps.playing && playing && !this.isPlaying) {\n                    this.player.play();\n                }\n                if (prevProps.playing && !playing && this.isPlaying) {\n                    this.player.pause();\n                }\n                if (!prevProps.pip && pip && this.player.enablePIP) {\n                    this.player.enablePIP();\n                }\n                if (prevProps.pip && !pip && this.player.disablePIP) {\n                    this.player.disablePIP();\n                }\n                if (prevProps.volume !== volume && volume !== null) {\n                    this.player.setVolume(volume);\n                }\n                if (prevProps.muted !== muted) {\n                    if (muted) {\n                        this.player.mute();\n                    } else {\n                        this.player.unmute();\n                        if (volume !== null) {\n                            // Set volume next tick to fix a bug with DailyMotion\n                            setTimeout(function() {\n                                return _this2.player.setVolume(volume);\n                            });\n                        }\n                    }\n                }\n                if (prevProps.playbackRate !== playbackRate && this.player.setPlaybackRate) {\n                    this.player.setPlaybackRate(playbackRate);\n                }\n                if (prevProps.loop !== loop && this.player.setLoop) {\n                    this.player.setLoop(loop);\n                }\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                if (!this.isReady) return null;\n                return this.player.getDuration();\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                if (!this.isReady) return null;\n                return this.player.getCurrentTime();\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                if (!this.isReady) return null;\n                return this.player.getSecondsLoaded();\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount, type, keepPlaying) {\n                var _this3 = this;\n                // When seeking before player is ready, store value and seek later\n                if (!this.isReady) {\n                    if (amount !== 0) {\n                        this.seekOnPlay = amount;\n                        setTimeout(function() {\n                            _this3.seekOnPlay = null;\n                        }, SEEK_ON_PLAY_EXPIRY);\n                    }\n                    return;\n                }\n                var isFraction = !type ? amount > 0 && amount < 1 : type === \"fraction\";\n                if (isFraction) {\n                    // Convert fraction to seconds based on duration\n                    var duration = this.player.getDuration();\n                    if (!duration) {\n                        console.warn(\"ReactPlayer: could not seek using fraction –\\xa0duration not yet available\");\n                        return;\n                    }\n                    this.player.seekTo(duration * amount, keepPlaying);\n                    return;\n                }\n                this.player.seekTo(amount, keepPlaying);\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var Player = this.props.activePlayer;\n                if (!Player) {\n                    return null;\n                }\n                return /*#__PURE__*/ _react[\"default\"].createElement(Player, _extends({}, this.props, {\n                    onMount: this.handlePlayerMount,\n                    onReady: this.handleReady,\n                    onPlay: this.handlePlay,\n                    onPause: this.handlePause,\n                    onEnded: this.handleEnded,\n                    onLoaded: this.handleLoaded,\n                    onError: this.handleError\n                }));\n            }\n        }\n    ]);\n    return Player;\n}(_react.Component);\nexports[\"default\"] = Player;\n_defineProperty(Player, \"displayName\", \"Player\");\n_defineProperty(Player, \"propTypes\", _props.propTypes);\n_defineProperty(Player, \"defaultProps\", _props.defaultProps);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Player.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/Preview.js":
/*!**************************************************!*\
  !*** ./node_modules/react-player/lib/Preview.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar ICON_SIZE = \"64px\";\nvar cache = {};\nvar Preview = /*#__PURE__*/ function(_Component) {\n    _inherits(Preview, _Component);\n    var _super = _createSuper(Preview);\n    function Preview() {\n        var _this;\n        _classCallCheck(this, Preview);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n        _defineProperty(_assertThisInitialized(_this), \"state\", {\n            image: null\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleKeyPress\", function(e) {\n            if (e.key === \"Enter\" || e.key === \" \") {\n                _this.props.onClick();\n            }\n        });\n        return _this;\n    }\n    _createClass(Preview, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.mounted = true;\n                this.fetchImage(this.props);\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                var _this$props = this.props, url = _this$props.url, light = _this$props.light;\n                if (prevProps.url !== url || prevProps.light !== light) {\n                    this.fetchImage(this.props);\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.mounted = false;\n            }\n        },\n        {\n            key: \"fetchImage\",\n            value: function fetchImage(_ref) {\n                var _this2 = this;\n                var url = _ref.url, light = _ref.light, oEmbedUrl = _ref.oEmbedUrl;\n                if (/*#__PURE__*/ _react[\"default\"].isValidElement(light)) {\n                    return;\n                }\n                if (typeof light === \"string\") {\n                    this.setState({\n                        image: light\n                    });\n                    return;\n                }\n                if (cache[url]) {\n                    this.setState({\n                        image: cache[url]\n                    });\n                    return;\n                }\n                this.setState({\n                    image: null\n                });\n                return window.fetch(oEmbedUrl.replace(\"{url}\", url)).then(function(response) {\n                    return response.json();\n                }).then(function(data) {\n                    if (data.thumbnail_url && _this2.mounted) {\n                        var image = data.thumbnail_url.replace(\"height=100\", \"height=480\").replace(\"-d_295x166\", \"-d_640\");\n                        _this2.setState({\n                            image: image\n                        });\n                        cache[url] = image;\n                    }\n                });\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props2 = this.props, light = _this$props2.light, onClick = _this$props2.onClick, playIcon = _this$props2.playIcon, previewTabIndex = _this$props2.previewTabIndex;\n                var image = this.state.image;\n                var isElement = /*#__PURE__*/ _react[\"default\"].isValidElement(light);\n                var flexCenter = {\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\"\n                };\n                var styles = {\n                    preview: _objectSpread({\n                        width: \"100%\",\n                        height: \"100%\",\n                        backgroundImage: image && !isElement ? \"url(\".concat(image, \")\") : undefined,\n                        backgroundSize: \"cover\",\n                        backgroundPosition: \"center\",\n                        cursor: \"pointer\"\n                    }, flexCenter),\n                    shadow: _objectSpread({\n                        background: \"radial-gradient(rgb(0, 0, 0, 0.3), rgba(0, 0, 0, 0) 60%)\",\n                        borderRadius: ICON_SIZE,\n                        width: ICON_SIZE,\n                        height: ICON_SIZE,\n                        position: isElement ? \"absolute\" : undefined\n                    }, flexCenter),\n                    playIcon: {\n                        borderStyle: \"solid\",\n                        borderWidth: \"16px 0 16px 26px\",\n                        borderColor: \"transparent transparent transparent white\",\n                        marginLeft: \"7px\"\n                    }\n                };\n                var defaultPlayIcon = /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.shadow,\n                    className: \"react-player__shadow\"\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.playIcon,\n                    className: \"react-player__play-icon\"\n                }));\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: styles.preview,\n                    className: \"react-player__preview\",\n                    onClick: onClick,\n                    tabIndex: previewTabIndex,\n                    onKeyPress: this.handleKeyPress\n                }, isElement ? light : null, playIcon || defaultPlayIcon);\n            }\n        }\n    ]);\n    return Preview;\n}(_react.Component);\nexports[\"default\"] = Preview;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/Preview.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/ReactPlayer.js":
/*!******************************************************!*\
  !*** ./node_modules/react-player/lib/ReactPlayer.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createReactPlayer = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _deepmerge = _interopRequireDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nvar _memoizeOne = _interopRequireDefault(__webpack_require__(/*! memoize-one */ \"(ssr)/./node_modules/memoize-one/dist/memoize-one.esm.js\"));\nvar _reactFastCompare = _interopRequireDefault(__webpack_require__(/*! react-fast-compare */ \"(ssr)/./node_modules/react-fast-compare/index.js\"));\nvar _props = __webpack_require__(/*! ./props */ \"(ssr)/./node_modules/react-player/lib/props.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _Player3 = _interopRequireDefault(__webpack_require__(/*! ./Player */ \"(ssr)/./node_modules/react-player/lib/Player.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar Preview = /*#__PURE__*/ (0, _react.lazy)(function() {\n    return Promise.resolve().then(function() {\n        return _interopRequireWildcard(__webpack_require__(/*! ./Preview */ \"(ssr)/./node_modules/react-player/lib/Preview.js\"));\n    });\n});\nvar IS_BROWSER =  false && 0;\nvar IS_GLOBAL = typeof global !== \"undefined\" && global.window && global.window.document;\nvar SUPPORTED_PROPS = Object.keys(_props.propTypes); // Return null when rendering on the server\n// as Suspense is not supported yet\nvar UniversalSuspense = IS_BROWSER || IS_GLOBAL ? _react.Suspense : function() {\n    return null;\n};\nvar customPlayers = [];\nvar createReactPlayer = function createReactPlayer(players, fallback) {\n    var _class, _temp;\n    return _temp = _class = /*#__PURE__*/ function(_Component) {\n        _inherits(ReactPlayer, _Component);\n        var _super = _createSuper(ReactPlayer);\n        function ReactPlayer() {\n            var _this;\n            _classCallCheck(this, ReactPlayer);\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            _this = _super.call.apply(_super, [\n                this\n            ].concat(args));\n            _defineProperty(_assertThisInitialized(_this), \"state\", {\n                showPreview: !!_this.props.light\n            });\n            _defineProperty(_assertThisInitialized(_this), \"references\", {\n                wrapper: function wrapper(_wrapper) {\n                    _this.wrapper = _wrapper;\n                },\n                player: function player(_player) {\n                    _this.player = _player;\n                }\n            });\n            _defineProperty(_assertThisInitialized(_this), \"handleClickPreview\", function(e) {\n                _this.setState({\n                    showPreview: false\n                });\n                _this.props.onClickPreview(e);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"showPreview\", function() {\n                _this.setState({\n                    showPreview: true\n                });\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getDuration\", function() {\n                if (!_this.player) return null;\n                return _this.player.getDuration();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getCurrentTime\", function() {\n                if (!_this.player) return null;\n                return _this.player.getCurrentTime();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getSecondsLoaded\", function() {\n                if (!_this.player) return null;\n                return _this.player.getSecondsLoaded();\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getInternalPlayer\", function() {\n                var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"player\";\n                if (!_this.player) return null;\n                return _this.player.getInternalPlayer(key);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"seekTo\", function(fraction, type, keepPlaying) {\n                if (!_this.player) return null;\n                _this.player.seekTo(fraction, type, keepPlaying);\n            });\n            _defineProperty(_assertThisInitialized(_this), \"handleReady\", function() {\n                _this.props.onReady(_assertThisInitialized(_this));\n            });\n            _defineProperty(_assertThisInitialized(_this), \"getActivePlayer\", (0, _memoizeOne[\"default\"])(function(url) {\n                for(var _i = 0, _arr = [].concat(customPlayers, _toConsumableArray(players)); _i < _arr.length; _i++){\n                    var player = _arr[_i];\n                    if (player.canPlay(url)) {\n                        return player;\n                    }\n                }\n                if (fallback) {\n                    return fallback;\n                }\n                return null;\n            }));\n            _defineProperty(_assertThisInitialized(_this), \"getConfig\", (0, _memoizeOne[\"default\"])(function(url, key) {\n                var config = _this.props.config;\n                return _deepmerge[\"default\"].all([\n                    _props.defaultProps.config,\n                    _props.defaultProps.config[key] || {},\n                    config,\n                    config[key] || {}\n                ]);\n            }));\n            _defineProperty(_assertThisInitialized(_this), \"getAttributes\", (0, _memoizeOne[\"default\"])(function(url) {\n                return (0, _utils.omit)(_this.props, SUPPORTED_PROPS);\n            }));\n            _defineProperty(_assertThisInitialized(_this), \"renderActivePlayer\", function(url) {\n                if (!url) return null;\n                var player = _this.getActivePlayer(url);\n                if (!player) return null;\n                var config = _this.getConfig(url, player.key);\n                return /*#__PURE__*/ _react[\"default\"].createElement(_Player3[\"default\"], _extends({}, _this.props, {\n                    key: player.key,\n                    ref: _this.references.player,\n                    config: config,\n                    activePlayer: player.lazyPlayer || player,\n                    onReady: _this.handleReady\n                }));\n            });\n            return _this;\n        }\n        _createClass(ReactPlayer, [\n            {\n                key: \"shouldComponentUpdate\",\n                value: function shouldComponentUpdate(nextProps, nextState) {\n                    return !(0, _reactFastCompare[\"default\"])(this.props, nextProps) || !(0, _reactFastCompare[\"default\"])(this.state, nextState);\n                }\n            },\n            {\n                key: \"componentDidUpdate\",\n                value: function componentDidUpdate(prevProps) {\n                    var light = this.props.light;\n                    if (!prevProps.light && light) {\n                        this.setState({\n                            showPreview: true\n                        });\n                    }\n                    if (prevProps.light && !light) {\n                        this.setState({\n                            showPreview: false\n                        });\n                    }\n                }\n            },\n            {\n                key: \"renderPreview\",\n                value: function renderPreview(url) {\n                    if (!url) return null;\n                    var _this$props = this.props, light = _this$props.light, playIcon = _this$props.playIcon, previewTabIndex = _this$props.previewTabIndex, oEmbedUrl = _this$props.oEmbedUrl;\n                    return /*#__PURE__*/ _react[\"default\"].createElement(Preview, {\n                        url: url,\n                        light: light,\n                        playIcon: playIcon,\n                        previewTabIndex: previewTabIndex,\n                        oEmbedUrl: oEmbedUrl,\n                        onClick: this.handleClickPreview\n                    });\n                }\n            },\n            {\n                key: \"render\",\n                value: function render() {\n                    var _this$props2 = this.props, url = _this$props2.url, style = _this$props2.style, width = _this$props2.width, height = _this$props2.height, fallback = _this$props2.fallback, Wrapper = _this$props2.wrapper;\n                    var showPreview = this.state.showPreview;\n                    var attributes = this.getAttributes(url);\n                    var wrapperRef = typeof Wrapper === \"string\" ? this.references.wrapper : undefined;\n                    return /*#__PURE__*/ _react[\"default\"].createElement(Wrapper, _extends({\n                        ref: wrapperRef,\n                        style: _objectSpread(_objectSpread({}, style), {}, {\n                            width: width,\n                            height: height\n                        })\n                    }, attributes), /*#__PURE__*/ _react[\"default\"].createElement(UniversalSuspense, {\n                        fallback: fallback\n                    }, showPreview ? this.renderPreview(url) : this.renderActivePlayer(url)));\n                }\n            }\n        ]);\n        return ReactPlayer;\n    }(_react.Component), _defineProperty(_class, \"displayName\", \"ReactPlayer\"), _defineProperty(_class, \"propTypes\", _props.propTypes), _defineProperty(_class, \"defaultProps\", _props.defaultProps), _defineProperty(_class, \"addCustomPlayer\", function(player) {\n        customPlayers.push(player);\n    }), _defineProperty(_class, \"removeCustomPlayers\", function() {\n        customPlayers.length = 0;\n    }), _defineProperty(_class, \"canPlay\", function(url) {\n        for(var _i2 = 0, _arr2 = [].concat(customPlayers, _toConsumableArray(players)); _i2 < _arr2.length; _i2++){\n            var _Player = _arr2[_i2];\n            if (_Player.canPlay(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _defineProperty(_class, \"canEnablePIP\", function(url) {\n        for(var _i3 = 0, _arr3 = [].concat(customPlayers, _toConsumableArray(players)); _i3 < _arr3.length; _i3++){\n            var _Player2 = _arr3[_i3];\n            if (_Player2.canEnablePIP && _Player2.canEnablePIP(url)) {\n                return true;\n            }\n        }\n        return false;\n    }), _temp;\n};\nexports.createReactPlayer = createReactPlayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/ReactPlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _players = _interopRequireDefault(__webpack_require__(/*! ./players */ \"(ssr)/./node_modules/react-player/lib/players/index.js\"));\nvar _ReactPlayer = __webpack_require__(/*! ./ReactPlayer */ \"(ssr)/./node_modules/react-player/lib/ReactPlayer.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\n// Fall back to FilePlayer if nothing else can play the URL\nvar fallback = _players[\"default\"][_players[\"default\"].length - 1];\nvar _default = (0, _ReactPlayer.createReactPlayer)(_players[\"default\"], fallback);\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtcGxheWVyL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxXQUFXQyx1QkFBdUJDLG1CQUFPQSxDQUFDLHlFQUFXO0FBRXpELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLDJFQUFlO0FBRTFDLFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFBRztBQUVoRywyREFBMkQ7QUFDM0QsSUFBSUUsV0FBV04sUUFBUSxDQUFDLFVBQVUsQ0FBQ0EsUUFBUSxDQUFDLFVBQVUsQ0FBQ08sTUFBTSxHQUFHLEVBQUU7QUFFbEUsSUFBSUMsV0FBVyxDQUFDLEdBQUdMLGFBQWFNLGlCQUFpQixFQUFFVCxRQUFRLENBQUMsVUFBVSxFQUFFTTtBQUV4RVIsa0JBQWtCLEdBQUdVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmNtYXotbmV4dGpzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBsYXllci9saWIvaW5kZXguanM/MWI5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3BsYXllcnMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3BsYXllcnNcIikpO1xuXG52YXIgX1JlYWN0UGxheWVyID0gcmVxdWlyZShcIi4vUmVhY3RQbGF5ZXJcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IFwiZGVmYXVsdFwiOiBvYmogfTsgfVxuXG4vLyBGYWxsIGJhY2sgdG8gRmlsZVBsYXllciBpZiBub3RoaW5nIGVsc2UgY2FuIHBsYXkgdGhlIFVSTFxudmFyIGZhbGxiYWNrID0gX3BsYXllcnNbXCJkZWZhdWx0XCJdW19wbGF5ZXJzW1wiZGVmYXVsdFwiXS5sZW5ndGggLSAxXTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9SZWFjdFBsYXllci5jcmVhdGVSZWFjdFBsYXllcikoX3BsYXllcnNbXCJkZWZhdWx0XCJdLCBmYWxsYmFjayk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX3BsYXllcnMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9SZWFjdFBsYXllciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJmYWxsYmFjayIsImxlbmd0aCIsIl9kZWZhdWx0IiwiY3JlYXRlUmVhY3RQbGF5ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/patterns.js":
/*!***************************************************!*\
  !*** ./node_modules/react-player/lib/patterns.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.canPlay = exports.FLV_EXTENSIONS = exports.DASH_EXTENSIONS = exports.HLS_EXTENSIONS = exports.VIDEO_EXTENSIONS = exports.AUDIO_EXTENSIONS = exports.MATCH_URL_KALTURA = exports.MATCH_URL_VIDYARD = exports.MATCH_URL_MIXCLOUD = exports.MATCH_URL_DAILYMOTION = exports.MATCH_URL_TWITCH_CHANNEL = exports.MATCH_URL_TWITCH_VIDEO = exports.MATCH_URL_WISTIA = exports.MATCH_URL_STREAMABLE = exports.MATCH_URL_FACEBOOK_WATCH = exports.MATCH_URL_FACEBOOK = exports.MATCH_URL_VIMEO = exports.MATCH_URL_SOUNDCLOUD = exports.MATCH_URL_YOUTUBE = void 0;\nvar _utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n    var it;\n    if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n            if (it) o = it;\n            var i = 0;\n            var F = function F() {};\n            return {\n                s: F,\n                n: function n() {\n                    if (i >= o.length) return {\n                        done: true\n                    };\n                    return {\n                        done: false,\n                        value: o[i++]\n                    };\n                },\n                e: function e(_e) {\n                    throw _e;\n                },\n                f: F\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true, didErr = false, err;\n    return {\n        s: function s() {\n            it = o[Symbol.iterator]();\n        },\n        n: function n() {\n            var step = it.next();\n            normalCompletion = step.done;\n            return step;\n        },\n        e: function e(_e2) {\n            didErr = true;\n            err = _e2;\n        },\n        f: function f() {\n            try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n            } finally{\n                if (didErr) throw err;\n            }\n        }\n    };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nvar MATCH_URL_YOUTUBE = /(?:youtu\\.be\\/|youtube(?:-nocookie|education)?\\.com\\/(?:embed\\/|v\\/|watch\\/|watch\\?v=|watch\\?.+&v=|shorts\\/|live\\/))((\\w|-){11})|youtube\\.com\\/playlist\\?list=|youtube\\.com\\/user\\//;\nexports.MATCH_URL_YOUTUBE = MATCH_URL_YOUTUBE;\nvar MATCH_URL_SOUNDCLOUD = /(?:soundcloud\\.com|snd\\.sc)\\/[^.]+$/;\nexports.MATCH_URL_SOUNDCLOUD = MATCH_URL_SOUNDCLOUD;\nvar MATCH_URL_VIMEO = /vimeo\\.com\\/(?!progressive_redirect).+/;\nexports.MATCH_URL_VIMEO = MATCH_URL_VIMEO;\nvar MATCH_URL_FACEBOOK = /^https?:\\/\\/(www\\.)?facebook\\.com.*\\/(video(s)?|watch|story)(\\.php?|\\/).+$/;\nexports.MATCH_URL_FACEBOOK = MATCH_URL_FACEBOOK;\nvar MATCH_URL_FACEBOOK_WATCH = /^https?:\\/\\/fb\\.watch\\/.+$/;\nexports.MATCH_URL_FACEBOOK_WATCH = MATCH_URL_FACEBOOK_WATCH;\nvar MATCH_URL_STREAMABLE = /streamable\\.com\\/([a-z0-9]+)$/;\nexports.MATCH_URL_STREAMABLE = MATCH_URL_STREAMABLE;\nvar MATCH_URL_WISTIA = /(?:wistia\\.(?:com|net)|wi\\.st)\\/(?:medias|embed)\\/(?:iframe\\/)?([^?]+)/;\nexports.MATCH_URL_WISTIA = MATCH_URL_WISTIA;\nvar MATCH_URL_TWITCH_VIDEO = /(?:www\\.|go\\.)?twitch\\.tv\\/videos\\/(\\d+)($|\\?)/;\nexports.MATCH_URL_TWITCH_VIDEO = MATCH_URL_TWITCH_VIDEO;\nvar MATCH_URL_TWITCH_CHANNEL = /(?:www\\.|go\\.)?twitch\\.tv\\/([a-zA-Z0-9_]+)($|\\?)/;\nexports.MATCH_URL_TWITCH_CHANNEL = MATCH_URL_TWITCH_CHANNEL;\nvar MATCH_URL_DAILYMOTION = /^(?:(?:https?):)?(?:\\/\\/)?(?:www\\.)?(?:(?:dailymotion\\.com(?:\\/embed)?\\/video)|dai\\.ly)\\/([a-zA-Z0-9]+)(?:_[\\w_-]+)?(?:[\\w.#_-]+)?/;\nexports.MATCH_URL_DAILYMOTION = MATCH_URL_DAILYMOTION;\nvar MATCH_URL_MIXCLOUD = /mixcloud\\.com\\/([^/]+\\/[^/]+)/;\nexports.MATCH_URL_MIXCLOUD = MATCH_URL_MIXCLOUD;\nvar MATCH_URL_VIDYARD = /vidyard.com\\/(?:watch\\/)?([a-zA-Z0-9-_]+)/;\nexports.MATCH_URL_VIDYARD = MATCH_URL_VIDYARD;\nvar MATCH_URL_KALTURA = /^https?:\\/\\/[a-zA-Z]+\\.kaltura.(com|org)\\/p\\/([0-9]+)\\/sp\\/([0-9]+)00\\/embedIframeJs\\/uiconf_id\\/([0-9]+)\\/partner_id\\/([0-9]+)(.*)entry_id.([a-zA-Z0-9-_].*)$/;\nexports.MATCH_URL_KALTURA = MATCH_URL_KALTURA;\nvar AUDIO_EXTENSIONS = /\\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nexports.AUDIO_EXTENSIONS = AUDIO_EXTENSIONS;\nvar VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\\d+]+)?($|\\?)/i;\nexports.VIDEO_EXTENSIONS = VIDEO_EXTENSIONS;\nvar HLS_EXTENSIONS = /\\.(m3u8)($|\\?)/i;\nexports.HLS_EXTENSIONS = HLS_EXTENSIONS;\nvar DASH_EXTENSIONS = /\\.(mpd)($|\\?)/i;\nexports.DASH_EXTENSIONS = DASH_EXTENSIONS;\nvar FLV_EXTENSIONS = /\\.(flv)($|\\?)/i;\nexports.FLV_EXTENSIONS = FLV_EXTENSIONS;\nvar canPlayFile = function canPlayFile(url) {\n    if (url instanceof Array) {\n        var _iterator = _createForOfIteratorHelper(url), _step;\n        try {\n            for(_iterator.s(); !(_step = _iterator.n()).done;){\n                var item = _step.value;\n                if (typeof item === \"string\" && canPlayFile(item)) {\n                    return true;\n                }\n                if (canPlayFile(item.src)) {\n                    return true;\n                }\n            }\n        } catch (err) {\n            _iterator.e(err);\n        } finally{\n            _iterator.f();\n        }\n        return false;\n    }\n    if ((0, _utils.isMediaStream)(url) || (0, _utils.isBlobUrl)(url)) {\n        return true;\n    }\n    return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url) || FLV_EXTENSIONS.test(url);\n};\nvar canPlay = {\n    youtube: function youtube(url) {\n        if (url instanceof Array) {\n            return url.every(function(item) {\n                return MATCH_URL_YOUTUBE.test(item);\n            });\n        }\n        return MATCH_URL_YOUTUBE.test(url);\n    },\n    soundcloud: function soundcloud(url) {\n        return MATCH_URL_SOUNDCLOUD.test(url) && !AUDIO_EXTENSIONS.test(url);\n    },\n    vimeo: function vimeo(url) {\n        return MATCH_URL_VIMEO.test(url) && !VIDEO_EXTENSIONS.test(url) && !HLS_EXTENSIONS.test(url);\n    },\n    facebook: function facebook(url) {\n        return MATCH_URL_FACEBOOK.test(url) || MATCH_URL_FACEBOOK_WATCH.test(url);\n    },\n    streamable: function streamable(url) {\n        return MATCH_URL_STREAMABLE.test(url);\n    },\n    wistia: function wistia(url) {\n        return MATCH_URL_WISTIA.test(url);\n    },\n    twitch: function twitch(url) {\n        return MATCH_URL_TWITCH_VIDEO.test(url) || MATCH_URL_TWITCH_CHANNEL.test(url);\n    },\n    dailymotion: function dailymotion(url) {\n        return MATCH_URL_DAILYMOTION.test(url);\n    },\n    mixcloud: function mixcloud(url) {\n        return MATCH_URL_MIXCLOUD.test(url);\n    },\n    vidyard: function vidyard(url) {\n        return MATCH_URL_VIDYARD.test(url);\n    },\n    kaltura: function kaltura(url) {\n        return MATCH_URL_KALTURA.test(url);\n    },\n    file: canPlayFile\n};\nexports.canPlay = canPlay;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/patterns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/DailyMotion.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-player/lib/players/DailyMotion.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://api.dmcdn.net/all.js\";\nvar SDK_GLOBAL = \"DM\";\nvar SDK_GLOBAL_READY = \"dmAsyncInit\";\nvar DailyMotion = /*#__PURE__*/ function(_Component) {\n    _inherits(DailyMotion, _Component);\n    var _super = _createSuper(DailyMotion);\n    function DailyMotion() {\n        var _this;\n        _classCallCheck(this, DailyMotion);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"onDurationChange\", function() {\n            var duration = _this.getDuration();\n            _this.props.onDuration(duration);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"setMuted\", true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"setMuted\", false);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(DailyMotion, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props = this.props, controls = _this$props.controls, config = _this$props.config, onError = _this$props.onError, playing = _this$props.playing;\n                var _url$match = url.match(_patterns.MATCH_URL_DAILYMOTION), _url$match2 = _slicedToArray(_url$match, 2), id = _url$match2[1];\n                if (this.player) {\n                    this.player.load(id, {\n                        start: (0, _utils.parseStartTime)(url),\n                        autoplay: playing\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {\n                    return DM.player;\n                }).then(function(DM) {\n                    if (!_this2.container) return;\n                    var Player = DM.player;\n                    _this2.player = new Player(_this2.container, {\n                        width: \"100%\",\n                        height: \"100%\",\n                        video: id,\n                        params: _objectSpread({\n                            controls: controls,\n                            autoplay: _this2.props.playing,\n                            mute: _this2.props.muted,\n                            start: (0, _utils.parseStartTime)(url),\n                            origin: window.location.origin\n                        }, config.params),\n                        events: {\n                            apiready: _this2.props.onReady,\n                            seeked: function seeked() {\n                                return _this2.props.onSeek(_this2.player.currentTime);\n                            },\n                            video_end: _this2.props.onEnded,\n                            durationchange: _this2.onDurationChange,\n                            pause: _this2.props.onPause,\n                            playing: _this2.props.onPlay,\n                            waiting: _this2.props.onBuffer,\n                            error: function error(event) {\n                                return onError(event);\n                            }\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.player.duration || null;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.player.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.player.bufferedTime;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return DailyMotion;\n}(_react.Component);\nexports[\"default\"] = DailyMotion;\n_defineProperty(DailyMotion, \"displayName\", \"DailyMotion\");\n_defineProperty(DailyMotion, \"canPlay\", _patterns.canPlay.dailymotion);\n_defineProperty(DailyMotion, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Facebook.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Facebook.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://connect.facebook.net/en_US/sdk.js\";\nvar SDK_GLOBAL = \"FB\";\nvar SDK_GLOBAL_READY = \"fbAsyncInit\";\nvar PLAYER_ID_PREFIX = \"facebook-player-\";\nvar Facebook = /*#__PURE__*/ function(_Component) {\n    _inherits(Facebook, _Component);\n    var _super = _createSuper(Facebook);\n    function Facebook() {\n        var _this;\n        _classCallCheck(this, Facebook);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        return _this;\n    }\n    _createClass(Facebook, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                if (isReady) {\n                    (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {\n                        return FB.XFBML.parse();\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {\n                    FB.init({\n                        appId: _this2.props.config.appId,\n                        xfbml: true,\n                        version: _this2.props.config.version\n                    });\n                    FB.Event.subscribe(\"xfbml.render\", function(msg) {\n                        // Here we know the SDK has loaded, even if onReady/onPlay\n                        // is not called due to a video that cannot be embedded\n                        _this2.props.onLoaded();\n                    });\n                    FB.Event.subscribe(\"xfbml.ready\", function(msg) {\n                        if (msg.type === \"video\" && msg.id === _this2.playerID) {\n                            _this2.player = msg.instance;\n                            _this2.player.subscribe(\"startedPlaying\", _this2.props.onPlay);\n                            _this2.player.subscribe(\"paused\", _this2.props.onPause);\n                            _this2.player.subscribe(\"finishedPlaying\", _this2.props.onEnded);\n                            _this2.player.subscribe(\"startedBuffering\", _this2.props.onBuffer);\n                            _this2.player.subscribe(\"finishedBuffering\", _this2.props.onBufferEnd);\n                            _this2.player.subscribe(\"error\", _this2.props.onError);\n                            if (_this2.props.muted) {\n                                _this2.callPlayer(\"mute\");\n                            } else {\n                                _this2.callPlayer(\"unmute\");\n                            }\n                            _this2.props.onReady(); // For some reason Facebook have added `visibility: hidden`\n                            // to the iframe when autoplay fails, so here we set it back\n                            document.getElementById(_this2.playerID).querySelector(\"iframe\").style.visibility = \"visible\";\n                        }\n                    });\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentPosition\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var attributes = this.props.config.attributes;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", _extends({\n                    style: style,\n                    id: this.playerID,\n                    className: \"fb-video\",\n                    \"data-href\": this.props.url,\n                    \"data-autoplay\": this.props.playing ? \"true\" : \"false\",\n                    \"data-allowfullscreen\": \"true\",\n                    \"data-controls\": this.props.controls ? \"true\" : \"false\"\n                }, attributes));\n            }\n        }\n    ]);\n    return Facebook;\n}(_react.Component);\nexports[\"default\"] = Facebook;\n_defineProperty(Facebook, \"displayName\", \"Facebook\");\n_defineProperty(Facebook, \"canPlay\", _patterns.canPlay.facebook);\n_defineProperty(Facebook, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Facebook.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/FilePlayer.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/FilePlayer.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar HAS_NAVIGATOR = typeof navigator !== \"undefined\";\nvar IS_IPAD_PRO = HAS_NAVIGATOR && navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1;\nvar IS_IOS = HAS_NAVIGATOR && (/iPad|iPhone|iPod/.test(navigator.userAgent) || IS_IPAD_PRO) && !window.MSStream;\nvar IS_SAFARI = HAS_NAVIGATOR && /^((?!chrome|android).)*safari/i.test(navigator.userAgent) && !window.MSStream;\nvar HLS_SDK_URL = \"https://cdn.jsdelivr.net/npm/hls.js@VERSION/dist/hls.min.js\";\nvar HLS_GLOBAL = \"Hls\";\nvar DASH_SDK_URL = \"https://cdnjs.cloudflare.com/ajax/libs/dashjs/VERSION/dash.all.min.js\";\nvar DASH_GLOBAL = \"dashjs\";\nvar FLV_SDK_URL = \"https://cdn.jsdelivr.net/npm/flv.js@VERSION/dist/flv.min.js\";\nvar FLV_GLOBAL = \"flvjs\";\nvar MATCH_DROPBOX_URL = /www\\.dropbox\\.com\\/.+/;\nvar MATCH_CLOUDFLARE_STREAM = /https:\\/\\/watch\\.cloudflarestream\\.com\\/([a-z0-9]+)/;\nvar REPLACE_CLOUDFLARE_STREAM = \"https://videodelivery.net/{id}/manifest/video.m3u8\";\nvar FilePlayer = /*#__PURE__*/ function(_Component) {\n    _inherits(FilePlayer, _Component);\n    var _super = _createSuper(FilePlayer);\n    function FilePlayer() {\n        var _this;\n        _classCallCheck(this, FilePlayer);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"onReady\", function() {\n            var _this$props;\n            return (_this$props = _this.props).onReady.apply(_this$props, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlay\", function() {\n            var _this$props2;\n            return (_this$props2 = _this.props).onPlay.apply(_this$props2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onBuffer\", function() {\n            var _this$props3;\n            return (_this$props3 = _this.props).onBuffer.apply(_this$props3, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onBufferEnd\", function() {\n            var _this$props4;\n            return (_this$props4 = _this.props).onBufferEnd.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPause\", function() {\n            var _this$props5;\n            return (_this$props5 = _this.props).onPause.apply(_this$props5, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnded\", function() {\n            var _this$props6;\n            return (_this$props6 = _this.props).onEnded.apply(_this$props6, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onError\", function() {\n            var _this$props7;\n            return (_this$props7 = _this.props).onError.apply(_this$props7, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlayBackRateChange\", function(event) {\n            return _this.props.onPlaybackRateChange(event.target.playbackRate);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnablePIP\", function() {\n            var _this$props8;\n            return (_this$props8 = _this.props).onEnablePIP.apply(_this$props8, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onDisablePIP\", function(e) {\n            var _this$props9 = _this.props, onDisablePIP = _this$props9.onDisablePIP, playing = _this$props9.playing;\n            onDisablePIP(e);\n            if (playing) {\n                _this.play();\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPresentationModeChange\", function(e) {\n            if (_this.player && (0, _utils.supportsWebKitPresentationMode)(_this.player)) {\n                var webkitPresentationMode = _this.player.webkitPresentationMode;\n                if (webkitPresentationMode === \"picture-in-picture\") {\n                    _this.onEnablePIP(e);\n                } else if (webkitPresentationMode === \"inline\") {\n                    _this.onDisablePIP(e);\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSeek\", function(e) {\n            _this.props.onSeek(e.target.currentTime);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.player.muted = true;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.player.muted = false;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderSourceElement\", function(source, index) {\n            if (typeof source === \"string\") {\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"source\", {\n                    key: index,\n                    src: source\n                });\n            }\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"source\", _extends({\n                key: index\n            }, source));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"renderTrack\", function(track, index) {\n            return /*#__PURE__*/ _react[\"default\"].createElement(\"track\", _extends({\n                key: index\n            }, track));\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(player) {\n            if (_this.player) {\n                // Store previous player to be used by removeListeners()\n                _this.prevPlayer = _this.player;\n            }\n            _this.player = player;\n        });\n        return _this;\n    }\n    _createClass(FilePlayer, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n                this.addListeners(this.player);\n                var src = this.getSource(this.props.url); // Ensure src is set in strict mode\n                if (src) {\n                    this.player.src = src;\n                }\n                if (IS_IOS || this.props.config.forceDisableHls) {\n                    this.player.load();\n                }\n            }\n        },\n        {\n            key: \"componentDidUpdate\",\n            value: function componentDidUpdate(prevProps) {\n                if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {\n                    this.removeListeners(this.prevPlayer, prevProps.url);\n                    this.addListeners(this.player);\n                }\n                if (this.props.url !== prevProps.url && !(0, _utils.isMediaStream)(this.props.url) && !(this.props.url instanceof Array // Avoid infinite loop\n                )) {\n                    this.player.srcObject = null;\n                }\n            }\n        },\n        {\n            key: \"componentWillUnmount\",\n            value: function componentWillUnmount() {\n                this.player.removeAttribute(\"src\");\n                this.removeListeners(this.player);\n                if (this.hls) {\n                    this.hls.destroy();\n                }\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function addListeners(player) {\n                var _this$props10 = this.props, url = _this$props10.url, playsinline = _this$props10.playsinline;\n                player.addEventListener(\"play\", this.onPlay);\n                player.addEventListener(\"waiting\", this.onBuffer);\n                player.addEventListener(\"playing\", this.onBufferEnd);\n                player.addEventListener(\"pause\", this.onPause);\n                player.addEventListener(\"seeked\", this.onSeek);\n                player.addEventListener(\"ended\", this.onEnded);\n                player.addEventListener(\"error\", this.onError);\n                player.addEventListener(\"ratechange\", this.onPlayBackRateChange);\n                player.addEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n                player.addEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n                player.addEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n                if (!this.shouldUseHLS(url)) {\n                    // onReady is handled by hls.js\n                    player.addEventListener(\"canplay\", this.onReady);\n                }\n                if (playsinline) {\n                    player.setAttribute(\"playsinline\", \"\");\n                    player.setAttribute(\"webkit-playsinline\", \"\");\n                    player.setAttribute(\"x5-playsinline\", \"\");\n                }\n            }\n        },\n        {\n            key: \"removeListeners\",\n            value: function removeListeners(player, url) {\n                player.removeEventListener(\"canplay\", this.onReady);\n                player.removeEventListener(\"play\", this.onPlay);\n                player.removeEventListener(\"waiting\", this.onBuffer);\n                player.removeEventListener(\"playing\", this.onBufferEnd);\n                player.removeEventListener(\"pause\", this.onPause);\n                player.removeEventListener(\"seeked\", this.onSeek);\n                player.removeEventListener(\"ended\", this.onEnded);\n                player.removeEventListener(\"error\", this.onError);\n                player.removeEventListener(\"ratechange\", this.onPlayBackRateChange);\n                player.removeEventListener(\"enterpictureinpicture\", this.onEnablePIP);\n                player.removeEventListener(\"leavepictureinpicture\", this.onDisablePIP);\n                player.removeEventListener(\"webkitpresentationmodechanged\", this.onPresentationModeChange);\n                if (!this.shouldUseHLS(url)) {\n                    // onReady is handled by hls.js\n                    player.removeEventListener(\"canplay\", this.onReady);\n                }\n            } // Proxy methods to prevent listener leaks\n        },\n        {\n            key: \"shouldUseAudio\",\n            value: function shouldUseAudio(props) {\n                if (props.config.forceVideo) {\n                    return false;\n                }\n                if (props.config.attributes.poster) {\n                    return false; // Use <video> so that poster is shown\n                }\n                return _patterns.AUDIO_EXTENSIONS.test(props.url) || props.config.forceAudio;\n            }\n        },\n        {\n            key: \"shouldUseHLS\",\n            value: function shouldUseHLS(url) {\n                if (IS_SAFARI && this.props.config.forceSafariHLS || this.props.config.forceHLS) {\n                    return true;\n                }\n                if (IS_IOS || this.props.config.forceDisableHls) {\n                    return false;\n                }\n                return _patterns.HLS_EXTENSIONS.test(url) || MATCH_CLOUDFLARE_STREAM.test(url);\n            }\n        },\n        {\n            key: \"shouldUseDASH\",\n            value: function shouldUseDASH(url) {\n                return _patterns.DASH_EXTENSIONS.test(url) || this.props.config.forceDASH;\n            }\n        },\n        {\n            key: \"shouldUseFLV\",\n            value: function shouldUseFLV(url) {\n                return _patterns.FLV_EXTENSIONS.test(url) || this.props.config.forceFLV;\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props$config = this.props.config, hlsVersion = _this$props$config.hlsVersion, hlsOptions = _this$props$config.hlsOptions, dashVersion = _this$props$config.dashVersion, flvVersion = _this$props$config.flvVersion;\n                if (this.hls) {\n                    this.hls.destroy();\n                }\n                if (this.dash) {\n                    this.dash.reset();\n                }\n                if (this.shouldUseHLS(url)) {\n                    (0, _utils.getSDK)(HLS_SDK_URL.replace(\"VERSION\", hlsVersion), HLS_GLOBAL).then(function(Hls) {\n                        _this2.hls = new Hls(hlsOptions);\n                        _this2.hls.on(Hls.Events.MANIFEST_PARSED, function() {\n                            _this2.props.onReady();\n                        });\n                        _this2.hls.on(Hls.Events.ERROR, function(e, data) {\n                            _this2.props.onError(e, data, _this2.hls, Hls);\n                        });\n                        if (MATCH_CLOUDFLARE_STREAM.test(url)) {\n                            var id = url.match(MATCH_CLOUDFLARE_STREAM)[1];\n                            _this2.hls.loadSource(REPLACE_CLOUDFLARE_STREAM.replace(\"{id}\", id));\n                        } else {\n                            _this2.hls.loadSource(url);\n                        }\n                        _this2.hls.attachMedia(_this2.player);\n                        _this2.props.onLoaded();\n                    });\n                }\n                if (this.shouldUseDASH(url)) {\n                    (0, _utils.getSDK)(DASH_SDK_URL.replace(\"VERSION\", dashVersion), DASH_GLOBAL).then(function(dashjs) {\n                        _this2.dash = dashjs.MediaPlayer().create();\n                        _this2.dash.initialize(_this2.player, url, _this2.props.playing);\n                        _this2.dash.on(\"error\", _this2.props.onError);\n                        if (parseInt(dashVersion) < 3) {\n                            _this2.dash.getDebug().setLogToBrowserConsole(false);\n                        } else {\n                            _this2.dash.updateSettings({\n                                debug: {\n                                    logLevel: dashjs.Debug.LOG_LEVEL_NONE\n                                }\n                            });\n                        }\n                        _this2.props.onLoaded();\n                    });\n                }\n                if (this.shouldUseFLV(url)) {\n                    (0, _utils.getSDK)(FLV_SDK_URL.replace(\"VERSION\", flvVersion), FLV_GLOBAL).then(function(flvjs) {\n                        _this2.flv = flvjs.createPlayer({\n                            type: \"flv\",\n                            url: url\n                        });\n                        _this2.flv.attachMediaElement(_this2.player);\n                        _this2.flv.on(flvjs.Events.ERROR, function(e, data) {\n                            _this2.props.onError(e, data, _this2.flv, flvjs);\n                        });\n                        _this2.flv.load();\n                        _this2.props.onLoaded();\n                    });\n                }\n                if (url instanceof Array) {\n                    // When setting new urls (<source>) on an already loaded video,\n                    // HTMLMediaElement.load() is needed to reset the media element\n                    // and restart the media resource. Just replacing children source\n                    // dom nodes is not enough\n                    this.player.load();\n                } else if ((0, _utils.isMediaStream)(url)) {\n                    try {\n                        this.player.srcObject = url;\n                    } catch (e) {\n                        this.player.src = window.URL.createObjectURL(url);\n                    }\n                }\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                var promise = this.player.play();\n                if (promise) {\n                    promise[\"catch\"](this.props.onError);\n                }\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.player.pause();\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.player.removeAttribute(\"src\");\n                if (this.dash) {\n                    this.dash.reset();\n                }\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.player.currentTime = seconds;\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.player.volume = fraction;\n            }\n        },\n        {\n            key: \"enablePIP\",\n            value: function enablePIP() {\n                if (this.player.requestPictureInPicture && document.pictureInPictureElement !== this.player) {\n                    this.player.requestPictureInPicture();\n                } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"picture-in-picture\") {\n                    this.player.webkitSetPresentationMode(\"picture-in-picture\");\n                }\n            }\n        },\n        {\n            key: \"disablePIP\",\n            value: function disablePIP() {\n                if (document.exitPictureInPicture && document.pictureInPictureElement === this.player) {\n                    document.exitPictureInPicture();\n                } else if ((0, _utils.supportsWebKitPresentationMode)(this.player) && this.player.webkitPresentationMode !== \"inline\") {\n                    this.player.webkitSetPresentationMode(\"inline\");\n                }\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                try {\n                    this.player.playbackRate = rate;\n                } catch (error) {\n                    this.props.onError(error);\n                }\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                if (!this.player) return null;\n                var _this$player = this.player, duration = _this$player.duration, seekable = _this$player.seekable; // on iOS, live streams return Infinity for the duration\n                // so instead we use the end of the seekable timerange\n                if (duration === Infinity && seekable.length > 0) {\n                    return seekable.end(seekable.length - 1);\n                }\n                return duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                if (!this.player) return null;\n                return this.player.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                if (!this.player) return null;\n                var buffered = this.player.buffered;\n                if (buffered.length === 0) {\n                    return 0;\n                }\n                var end = buffered.end(buffered.length - 1);\n                var duration = this.getDuration();\n                if (end > duration) {\n                    return duration;\n                }\n                return end;\n            }\n        },\n        {\n            key: \"getSource\",\n            value: function getSource(url) {\n                var useHLS = this.shouldUseHLS(url);\n                var useDASH = this.shouldUseDASH(url);\n                var useFLV = this.shouldUseFLV(url);\n                if (url instanceof Array || (0, _utils.isMediaStream)(url) || useHLS || useDASH || useFLV) {\n                    return undefined;\n                }\n                if (MATCH_DROPBOX_URL.test(url)) {\n                    return url.replace(\"www.dropbox.com\", \"dl.dropboxusercontent.com\");\n                }\n                return url;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props11 = this.props, url = _this$props11.url, playing = _this$props11.playing, loop = _this$props11.loop, controls = _this$props11.controls, muted = _this$props11.muted, config = _this$props11.config, width = _this$props11.width, height = _this$props11.height;\n                var useAudio = this.shouldUseAudio(this.props);\n                var Element = useAudio ? \"audio\" : \"video\";\n                var style = {\n                    width: width === \"auto\" ? width : \"100%\",\n                    height: height === \"auto\" ? height : \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(Element, _extends({\n                    ref: this.ref,\n                    src: this.getSource(url),\n                    style: style,\n                    preload: \"auto\",\n                    autoPlay: playing || undefined,\n                    controls: controls,\n                    muted: muted,\n                    loop: loop\n                }, config.attributes), url instanceof Array && url.map(this.renderSourceElement), config.tracks.map(this.renderTrack));\n            }\n        }\n    ]);\n    return FilePlayer;\n}(_react.Component);\nexports[\"default\"] = FilePlayer;\n_defineProperty(FilePlayer, \"displayName\", \"FilePlayer\");\n_defineProperty(FilePlayer, \"canPlay\", _patterns.canPlay.file);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Kaltura.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Kaltura.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nvar SDK_GLOBAL = \"playerjs\";\nvar Kaltura = /*#__PURE__*/ function(_Component) {\n    _inherits(Kaltura, _Component);\n    var _super = _createSuper(Kaltura);\n    function Kaltura() {\n        var _this;\n        _classCallCheck(this, Kaltura);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Kaltura, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {\n                    if (!_this2.iframe) return;\n                    _this2.player = new playerjs.Player(_this2.iframe);\n                    _this2.player.on(\"ready\", function() {\n                        // An arbitrary timeout is required otherwise\n                        // the event listeners won’t work\n                        setTimeout(function() {\n                            _this2.player.isReady = true;\n                            _this2.player.setLoop(_this2.props.loop);\n                            if (_this2.props.muted) {\n                                _this2.player.mute();\n                            }\n                            _this2.addListeners(_this2.player, _this2.props);\n                            _this2.props.onReady();\n                        }, 500);\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"addListeners\",\n            value: function addListeners(player, props) {\n                var _this3 = this;\n                player.on(\"play\", props.onPlay);\n                player.on(\"pause\", props.onPause);\n                player.on(\"ended\", props.onEnded);\n                player.on(\"error\", props.onError);\n                player.on(\"timeupdate\", function(_ref) {\n                    var duration = _ref.duration, seconds = _ref.seconds;\n                    _this3.duration = duration;\n                    _this3.currentTime = seconds;\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"setCurrentTime\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: this.props.url,\n                    frameBorder: \"0\",\n                    scrolling: \"no\",\n                    style: style,\n                    allow: \"encrypted-media; autoplay; fullscreen;\",\n                    referrerPolicy: \"no-referrer-when-downgrade\"\n                });\n            }\n        }\n    ]);\n    return Kaltura;\n}(_react.Component);\nexports[\"default\"] = Kaltura;\n_defineProperty(Kaltura, \"displayName\", \"Kaltura\");\n_defineProperty(Kaltura, \"canPlay\", _patterns.canPlay.kaltura);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Kaltura.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Mixcloud.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Mixcloud.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://widget.mixcloud.com/media/js/widgetApi.js\";\nvar SDK_GLOBAL = \"Mixcloud\";\nvar Mixcloud = /*#__PURE__*/ function(_Component) {\n    _inherits(Mixcloud, _Component);\n    var _super = _createSuper(Mixcloud);\n    function Mixcloud() {\n        var _this;\n        _classCallCheck(this, Mixcloud);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {});\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {});\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Mixcloud, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Mixcloud) {\n                    _this2.player = Mixcloud.PlayerWidget(_this2.iframe);\n                    _this2.player.ready.then(function() {\n                        _this2.player.events.play.on(_this2.props.onPlay);\n                        _this2.player.events.pause.on(_this2.props.onPause);\n                        _this2.player.events.ended.on(_this2.props.onEnded);\n                        _this2.player.events.error.on(_this2.props.error);\n                        _this2.player.events.progress.on(function(seconds, duration) {\n                            _this2.currentTime = seconds;\n                            _this2.duration = duration;\n                        });\n                        _this2.props.onReady();\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {}\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var _this$props = this.props, url = _this$props.url, config = _this$props.config;\n                var id = url.match(_patterns.MATCH_URL_MIXCLOUD)[1];\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                var query = (0, _utils.queryString)(_objectSpread(_objectSpread({}, config.options), {}, {\n                    feed: \"/\".concat(id, \"/\")\n                })); // We have to give the iframe a key here to prevent a\n                // weird dialog appearing when loading a new track\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    key: id,\n                    ref: this.ref,\n                    style: style,\n                    src: \"https://www.mixcloud.com/widget/iframe/?\".concat(query),\n                    frameBorder: \"0\",\n                    allow: \"autoplay\"\n                });\n            }\n        }\n    ]);\n    return Mixcloud;\n}(_react.Component);\nexports[\"default\"] = Mixcloud;\n_defineProperty(Mixcloud, \"displayName\", \"Mixcloud\");\n_defineProperty(Mixcloud, \"canPlay\", _patterns.canPlay.mixcloud);\n_defineProperty(Mixcloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/SoundCloud.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/SoundCloud.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://w.soundcloud.com/player/api.js\";\nvar SDK_GLOBAL = \"SC\";\nvar SoundCloud = /*#__PURE__*/ function(_Component) {\n    _inherits(SoundCloud, _Component);\n    var _super = _createSuper(SoundCloud);\n    function SoundCloud() {\n        var _this;\n        _classCallCheck(this, SoundCloud);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"fractionLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setVolume(0);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            if (_this.props.volume !== null) {\n                _this.setVolume(_this.props.volume);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(SoundCloud, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(SC) {\n                    if (!_this2.iframe) return;\n                    var _SC$Widget$Events = SC.Widget.Events, PLAY = _SC$Widget$Events.PLAY, PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS, PAUSE = _SC$Widget$Events.PAUSE, FINISH = _SC$Widget$Events.FINISH, ERROR = _SC$Widget$Events.ERROR;\n                    if (!isReady) {\n                        _this2.player = SC.Widget(_this2.iframe);\n                        _this2.player.bind(PLAY, _this2.props.onPlay);\n                        _this2.player.bind(PAUSE, function() {\n                            var remaining = _this2.duration - _this2.currentTime;\n                            if (remaining < 0.05) {\n                                // Prevent onPause firing right before onEnded\n                                return;\n                            }\n                            _this2.props.onPause();\n                        });\n                        _this2.player.bind(PLAY_PROGRESS, function(e) {\n                            _this2.currentTime = e.currentPosition / 1000;\n                            _this2.fractionLoaded = e.loadedProgress;\n                        });\n                        _this2.player.bind(FINISH, function() {\n                            return _this2.props.onEnded();\n                        });\n                        _this2.player.bind(ERROR, function(e) {\n                            return _this2.props.onError(e);\n                        });\n                    }\n                    _this2.player.load(url, _objectSpread(_objectSpread({}, _this2.props.config.options), {}, {\n                        callback: function callback() {\n                            _this2.player.getDuration(function(duration) {\n                                _this2.duration = duration / 1000;\n                                _this2.props.onReady();\n                            });\n                        }\n                    }));\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seekTo\", seconds * 1000);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.fractionLoaded * this.duration;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: \"https://w.soundcloud.com/player/?url=\".concat(encodeURIComponent(this.props.url)),\n                    style: style,\n                    frameBorder: 0,\n                    allow: \"autoplay\"\n                });\n            }\n        }\n    ]);\n    return SoundCloud;\n}(_react.Component);\nexports[\"default\"] = SoundCloud;\n_defineProperty(SoundCloud, \"displayName\", \"SoundCloud\");\n_defineProperty(SoundCloud, \"canPlay\", _patterns.canPlay.soundcloud);\n_defineProperty(SoundCloud, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Streamable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-player/lib/players/Streamable.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://cdn.embed.ly/player-0.1.0.min.js\";\nvar SDK_GLOBAL = \"playerjs\";\nvar Streamable = /*#__PURE__*/ function(_Component) {\n    _inherits(Streamable, _Component);\n    var _super = _createSuper(Streamable);\n    function Streamable() {\n        var _this;\n        _classCallCheck(this, Streamable);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(iframe) {\n            _this.iframe = iframe;\n        });\n        return _this;\n    }\n    _createClass(Streamable, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {\n                    if (!_this2.iframe) return;\n                    _this2.player = new playerjs.Player(_this2.iframe);\n                    _this2.player.setLoop(_this2.props.loop);\n                    _this2.player.on(\"ready\", _this2.props.onReady);\n                    _this2.player.on(\"play\", _this2.props.onPlay);\n                    _this2.player.on(\"pause\", _this2.props.onPause);\n                    _this2.player.on(\"seeked\", _this2.props.onSeek);\n                    _this2.player.on(\"ended\", _this2.props.onEnded);\n                    _this2.player.on(\"error\", _this2.props.onError);\n                    _this2.player.on(\"timeupdate\", function(_ref) {\n                        var duration = _ref.duration, seconds = _ref.seconds;\n                        _this2.duration = duration;\n                        _this2.currentTime = seconds;\n                    });\n                    _this2.player.on(\"buffered\", function(_ref2) {\n                        var percent = _ref2.percent;\n                        if (_this2.duration) {\n                            _this2.secondsLoaded = _this2.duration * percent;\n                        }\n                    });\n                    if (_this2.props.muted) {\n                        _this2.player.mute();\n                    }\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {}\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"setCurrentTime\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var id = this.props.url.match(_patterns.MATCH_URL_STREAMABLE)[1];\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"iframe\", {\n                    ref: this.ref,\n                    src: \"https://streamable.com/o/\".concat(id),\n                    frameBorder: \"0\",\n                    scrolling: \"no\",\n                    style: style,\n                    allow: \"encrypted-media; autoplay; fullscreen;\"\n                });\n            }\n        }\n    ]);\n    return Streamable;\n}(_react.Component);\nexports[\"default\"] = Streamable;\n_defineProperty(Streamable, \"displayName\", \"Streamable\");\n_defineProperty(Streamable, \"canPlay\", _patterns.canPlay.streamable);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Streamable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Twitch.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Twitch.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://player.twitch.tv/js/embed/v1.js\";\nvar SDK_GLOBAL = \"Twitch\";\nvar PLAYER_ID_PREFIX = \"twitch-player-\";\nvar Twitch = /*#__PURE__*/ function(_Component) {\n    _inherits(Twitch, _Component);\n    var _super = _createSuper(Twitch);\n    function Twitch() {\n        var _this;\n        _classCallCheck(this, Twitch);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"setMuted\", true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"setMuted\", false);\n        });\n        return _this;\n    }\n    _createClass(Twitch, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                var _this$props = this.props, playsinline = _this$props.playsinline, onError = _this$props.onError, config = _this$props.config, controls = _this$props.controls;\n                var isChannel = _patterns.MATCH_URL_TWITCH_CHANNEL.test(url);\n                var id = isChannel ? url.match(_patterns.MATCH_URL_TWITCH_CHANNEL)[1] : url.match(_patterns.MATCH_URL_TWITCH_VIDEO)[1];\n                if (isReady) {\n                    if (isChannel) {\n                        this.player.setChannel(id);\n                    } else {\n                        this.player.setVideo(\"v\" + id);\n                    }\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Twitch) {\n                    _this2.player = new Twitch.Player(_this2.playerID, _objectSpread({\n                        video: isChannel ? \"\" : id,\n                        channel: isChannel ? id : \"\",\n                        height: \"100%\",\n                        width: \"100%\",\n                        playsinline: playsinline,\n                        autoplay: _this2.props.playing,\n                        muted: _this2.props.muted,\n                        // https://github.com/CookPete/react-player/issues/733#issuecomment-549085859\n                        controls: isChannel ? true : controls,\n                        time: (0, _utils.parseStartTime)(url)\n                    }, config.options));\n                    var _Twitch$Player = Twitch.Player, READY = _Twitch$Player.READY, PLAYING = _Twitch$Player.PLAYING, PAUSE = _Twitch$Player.PAUSE, ENDED = _Twitch$Player.ENDED, ONLINE = _Twitch$Player.ONLINE, OFFLINE = _Twitch$Player.OFFLINE, SEEK = _Twitch$Player.SEEK;\n                    _this2.player.addEventListener(READY, _this2.props.onReady);\n                    _this2.player.addEventListener(PLAYING, _this2.props.onPlay);\n                    _this2.player.addEventListener(PAUSE, _this2.props.onPause);\n                    _this2.player.addEventListener(ENDED, _this2.props.onEnded);\n                    _this2.player.addEventListener(SEEK, _this2.props.onSeek); // Prevent weird isLoading behaviour when streams are offline\n                    _this2.player.addEventListener(ONLINE, _this2.props.onLoaded);\n                    _this2.player.addEventListener(OFFLINE, _this2.props.onLoaded);\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style,\n                    id: this.playerID\n                });\n            }\n        }\n    ]);\n    return Twitch;\n}(_react.Component);\nexports[\"default\"] = Twitch;\n_defineProperty(Twitch, \"displayName\", \"Twitch\");\n_defineProperty(Twitch, \"canPlay\", _patterns.canPlay.twitch);\n_defineProperty(Twitch, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Twitch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vidyard.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vidyard.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://play.vidyard.com/embed/v4.js\";\nvar SDK_GLOBAL = \"VidyardV4\";\nvar SDK_GLOBAL_READY = \"onVidyardAPI\";\nvar Vidyard = /*#__PURE__*/ function(_Component) {\n    _inherits(Vidyard, _Component);\n    var _super = _createSuper(Vidyard);\n    function Vidyard() {\n        var _this;\n        _classCallCheck(this, Vidyard);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setVolume(0);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            if (_this.props.volume !== null) {\n                _this.setVolume(_this.props.volume);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(Vidyard, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props = this.props, playing = _this$props.playing, config = _this$props.config, onError = _this$props.onError, onDuration = _this$props.onDuration;\n                var id = url && url.match(_patterns.MATCH_URL_VIDYARD)[1];\n                if (this.player) {\n                    this.stop();\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(Vidyard) {\n                    if (!_this2.container) return;\n                    Vidyard.api.addReadyListener(function(data, player) {\n                        if (_this2.player) {\n                            return;\n                        }\n                        _this2.player = player;\n                        _this2.player.on(\"ready\", _this2.props.onReady);\n                        _this2.player.on(\"play\", _this2.props.onPlay);\n                        _this2.player.on(\"pause\", _this2.props.onPause);\n                        _this2.player.on(\"seek\", _this2.props.onSeek);\n                        _this2.player.on(\"playerComplete\", _this2.props.onEnded);\n                    }, id);\n                    Vidyard.api.renderPlayer(_objectSpread({\n                        uuid: id,\n                        container: _this2.container,\n                        autoplay: playing ? 1 : 0\n                    }, config.options));\n                    Vidyard.api.getPlayerMetadata(id).then(function(meta) {\n                        _this2.duration = meta.length_in_seconds;\n                        onDuration(meta.length_in_seconds);\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                window.VidyardV4.api.destroyPlayer(this.player);\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"seek\", amount);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackSpeed\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"currentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return Vidyard;\n}(_react.Component);\nexports[\"default\"] = Vidyard;\n_defineProperty(Vidyard, \"displayName\", \"Vidyard\");\n_defineProperty(Vidyard, \"canPlay\", _patterns.canPlay.vidyard);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vidyard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Vimeo.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Vimeo.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://player.vimeo.com/api/player.js\";\nvar SDK_GLOBAL = \"Vimeo\";\nvar cleanUrl = function cleanUrl(url) {\n    return url.replace(\"/manage/videos\", \"\");\n};\nvar Vimeo = /*#__PURE__*/ function(_Component) {\n    _inherits(Vimeo, _Component);\n    var _super = _createSuper(Vimeo);\n    function Vimeo() {\n        var _this;\n        _classCallCheck(this, Vimeo);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"duration\", null);\n        _defineProperty(_assertThisInitialized(_this), \"currentTime\", null);\n        _defineProperty(_assertThisInitialized(_this), \"secondsLoaded\", null);\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.setMuted(true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.setMuted(false);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(Vimeo, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                this.duration = null;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo) {\n                    if (!_this2.container) return;\n                    var _this2$props$config = _this2.props.config, playerOptions = _this2$props$config.playerOptions, title = _this2$props$config.title;\n                    _this2.player = new Vimeo.Player(_this2.container, _objectSpread({\n                        url: cleanUrl(url),\n                        autoplay: _this2.props.playing,\n                        muted: _this2.props.muted,\n                        loop: _this2.props.loop,\n                        playsinline: _this2.props.playsinline,\n                        controls: _this2.props.controls\n                    }, playerOptions));\n                    _this2.player.ready().then(function() {\n                        var iframe = _this2.container.querySelector(\"iframe\");\n                        iframe.style.width = \"100%\";\n                        iframe.style.height = \"100%\";\n                        if (title) {\n                            iframe.title = title;\n                        }\n                    })[\"catch\"](_this2.props.onError);\n                    _this2.player.on(\"loaded\", function() {\n                        _this2.props.onReady();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"play\", function() {\n                        _this2.props.onPlay();\n                        _this2.refreshDuration();\n                    });\n                    _this2.player.on(\"pause\", _this2.props.onPause);\n                    _this2.player.on(\"seeked\", function(e) {\n                        return _this2.props.onSeek(e.seconds);\n                    });\n                    _this2.player.on(\"ended\", _this2.props.onEnded);\n                    _this2.player.on(\"error\", _this2.props.onError);\n                    _this2.player.on(\"timeupdate\", function(_ref) {\n                        var seconds = _ref.seconds;\n                        _this2.currentTime = seconds;\n                    });\n                    _this2.player.on(\"progress\", function(_ref2) {\n                        var seconds = _ref2.seconds;\n                        _this2.secondsLoaded = seconds;\n                    });\n                    _this2.player.on(\"bufferstart\", _this2.props.onBuffer);\n                    _this2.player.on(\"bufferend\", _this2.props.onBufferEnd);\n                    _this2.player.on(\"playbackratechange\", function(e) {\n                        return _this2.props.onPlaybackRateChange(e.playbackRate);\n                    });\n                }, this.props.onError);\n            }\n        },\n        {\n            key: \"refreshDuration\",\n            value: function refreshDuration() {\n                var _this3 = this;\n                this.player.getDuration().then(function(duration) {\n                    _this3.duration = duration;\n                });\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                var promise = this.callPlayer(\"play\");\n                if (promise) {\n                    promise[\"catch\"](this.props.onError);\n                }\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.callPlayer(\"unload\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"setCurrentTime\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction);\n            }\n        },\n        {\n            key: \"setMuted\",\n            value: function setMuted(muted) {\n                this.callPlayer(\"setMuted\", muted);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.duration;\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.currentTime;\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.secondsLoaded;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    overflow: \"hidden\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    key: this.props.url,\n                    ref: this.ref,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Vimeo;\n}(_react.Component);\nexports[\"default\"] = Vimeo;\n_defineProperty(Vimeo, \"displayName\", \"Vimeo\");\n_defineProperty(Vimeo, \"canPlay\", _patterns.canPlay.vimeo);\n_defineProperty(Vimeo, \"forceLoad\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Vimeo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/Wistia.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-player/lib/players/Wistia.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://fast.wistia.com/assets/external/E-v1.js\";\nvar SDK_GLOBAL = \"Wistia\";\nvar PLAYER_ID_PREFIX = \"wistia-player-\";\nvar Wistia = /*#__PURE__*/ function(_Component) {\n    _inherits(Wistia, _Component);\n    var _super = _createSuper(Wistia);\n    function Wistia() {\n        var _this;\n        _classCallCheck(this, Wistia);\n        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++){\n            _args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(_args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"playerID\", _this.props.config.playerId || \"\".concat(PLAYER_ID_PREFIX).concat((0, _utils.randomString)()));\n        _defineProperty(_assertThisInitialized(_this), \"onPlay\", function() {\n            var _this$props;\n            return (_this$props = _this.props).onPlay.apply(_this$props, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPause\", function() {\n            var _this$props2;\n            return (_this$props2 = _this.props).onPause.apply(_this$props2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onSeek\", function() {\n            var _this$props3;\n            return (_this$props3 = _this.props).onSeek.apply(_this$props3, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onEnded\", function() {\n            var _this$props4;\n            return (_this$props4 = _this.props).onEnded.apply(_this$props4, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onPlaybackRateChange\", function() {\n            var _this$props5;\n            return (_this$props5 = _this.props).onPlaybackRateChange.apply(_this$props5, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unmute\");\n        });\n        return _this;\n    }\n    _createClass(Wistia, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url) {\n                var _this2 = this;\n                var _this$props6 = this.props, playing = _this$props6.playing, muted = _this$props6.muted, controls = _this$props6.controls, _onReady = _this$props6.onReady, config = _this$props6.config, onError = _this$props6.onError;\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Wistia) {\n                    if (config.customControls) {\n                        config.customControls.forEach(function(control) {\n                            return Wistia.defineControl(control);\n                        });\n                    }\n                    window._wq = window._wq || [];\n                    window._wq.push({\n                        id: _this2.playerID,\n                        options: _objectSpread({\n                            autoPlay: playing,\n                            silentAutoPlay: \"allow\",\n                            muted: muted,\n                            controlsVisibleOnLoad: controls,\n                            fullscreenButton: controls,\n                            playbar: controls,\n                            playbackRateControl: controls,\n                            qualityControl: controls,\n                            volumeControl: controls,\n                            settingsControl: controls,\n                            smallPlayButton: controls\n                        }, config.options),\n                        onReady: function onReady(player) {\n                            _this2.player = player;\n                            _this2.unbind();\n                            _this2.player.bind(\"play\", _this2.onPlay);\n                            _this2.player.bind(\"pause\", _this2.onPause);\n                            _this2.player.bind(\"seek\", _this2.onSeek);\n                            _this2.player.bind(\"end\", _this2.onEnded);\n                            _this2.player.bind(\"playbackratechange\", _this2.onPlaybackRateChange);\n                            _onReady();\n                        }\n                    });\n                }, onError);\n            }\n        },\n        {\n            key: \"unbind\",\n            value: function unbind() {\n                this.player.unbind(\"play\", this.onPlay);\n                this.player.unbind(\"pause\", this.onPause);\n                this.player.unbind(\"seek\", this.onSeek);\n                this.player.unbind(\"end\", this.onEnded);\n                this.player.unbind(\"playbackratechange\", this.onPlaybackRateChange);\n            } // Proxy methods to prevent listener leaks\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"play\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pause\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                this.unbind();\n                this.callPlayer(\"remove\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(seconds) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n                this.callPlayer(\"time\", seconds);\n                if (!keepPlaying) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"volume\", fraction);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"playbackRate\", rate);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"duration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"time\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return null;\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var url = this.props.url;\n                var videoID = url && url.match(_patterns.MATCH_URL_WISTIA)[1];\n                var className = \"wistia_embed wistia_async_\".concat(videoID);\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\"\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    id: this.playerID,\n                    key: videoID,\n                    className: className,\n                    style: style\n                });\n            }\n        }\n    ]);\n    return Wistia;\n}(_react.Component);\nexports[\"default\"] = Wistia;\n_defineProperty(Wistia, \"displayName\", \"Wistia\");\n_defineProperty(Wistia, \"canPlay\", _patterns.canPlay.wistia);\n_defineProperty(Wistia, \"loopOnEnded\", true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/Wistia.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/YouTube.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-player/lib/players/YouTube.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        if (enumerableOnly) symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        });\n        keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        if (i % 2) {\n            ownKeys(Object(source), true).forEach(function(key) {\n                _defineProperty(target, key, source[key]);\n            });\n        } else if (Object.getOwnPropertyDescriptors) {\n            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n        } else {\n            ownKeys(Object(source)).forEach(function(key) {\n                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n            });\n        }\n    }\n    return target;\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n    return function _createSuperInternal() {\n        var Super = _getPrototypeOf(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = _getPrototypeOf(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return _possibleConstructorReturn(this, result);\n    };\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction _getPrototypeOf(o) {\n    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nvar SDK_URL = \"https://www.youtube.com/iframe_api\";\nvar SDK_GLOBAL = \"YT\";\nvar SDK_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nvar MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;\nvar MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/;\nvar MATCH_NOCOOKIE = /youtube-nocookie\\.com/;\nvar NOCOOKIE_HOST = \"https://www.youtube-nocookie.com\";\nvar YouTube = /*#__PURE__*/ function(_Component) {\n    _inherits(YouTube, _Component);\n    var _super = _createSuper(YouTube);\n    function YouTube() {\n        var _this;\n        _classCallCheck(this, YouTube);\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        _this = _super.call.apply(_super, [\n            this\n        ].concat(args));\n        _defineProperty(_assertThisInitialized(_this), \"callPlayer\", _utils.callPlayer);\n        _defineProperty(_assertThisInitialized(_this), \"parsePlaylist\", function(url) {\n            if (url instanceof Array) {\n                return {\n                    listType: \"playlist\",\n                    playlist: url.map(_this.getID).join(\",\")\n                };\n            }\n            if (MATCH_PLAYLIST.test(url)) {\n                var _url$match = url.match(MATCH_PLAYLIST), _url$match2 = _slicedToArray(_url$match, 2), playlistId = _url$match2[1];\n                return {\n                    listType: \"playlist\",\n                    list: playlistId.replace(/^UC/, \"UU\")\n                };\n            }\n            if (MATCH_USER_UPLOADS.test(url)) {\n                var _url$match3 = url.match(MATCH_USER_UPLOADS), _url$match4 = _slicedToArray(_url$match3, 2), username = _url$match4[1];\n                return {\n                    listType: \"user_uploads\",\n                    list: username\n                };\n            }\n            return {};\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onStateChange\", function(event) {\n            var data = event.data;\n            var _this$props = _this.props, onPlay = _this$props.onPlay, onPause = _this$props.onPause, onBuffer = _this$props.onBuffer, onBufferEnd = _this$props.onBufferEnd, onEnded = _this$props.onEnded, onReady = _this$props.onReady, loop = _this$props.loop, _this$props$config = _this$props.config, playerVars = _this$props$config.playerVars, onUnstarted = _this$props$config.onUnstarted;\n            var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState, UNSTARTED = _window$SDK_GLOBAL$Pl.UNSTARTED, PLAYING = _window$SDK_GLOBAL$Pl.PLAYING, PAUSED = _window$SDK_GLOBAL$Pl.PAUSED, BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING, ENDED = _window$SDK_GLOBAL$Pl.ENDED, CUED = _window$SDK_GLOBAL$Pl.CUED;\n            if (data === UNSTARTED) onUnstarted();\n            if (data === PLAYING) {\n                onPlay();\n                onBufferEnd();\n            }\n            if (data === PAUSED) onPause();\n            if (data === BUFFERING) onBuffer();\n            if (data === ENDED) {\n                var isPlaylist = !!_this.callPlayer(\"getPlaylist\"); // Only loop manually if not playing a playlist\n                if (loop && !isPlaylist) {\n                    if (playerVars.start) {\n                        _this.seekTo(playerVars.start);\n                    } else {\n                        _this.play();\n                    }\n                }\n                onEnded();\n            }\n            if (data === CUED) onReady();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"mute\", function() {\n            _this.callPlayer(\"mute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unmute\", function() {\n            _this.callPlayer(\"unMute\");\n        });\n        _defineProperty(_assertThisInitialized(_this), \"ref\", function(container) {\n            _this.container = container;\n        });\n        return _this;\n    }\n    _createClass(YouTube, [\n        {\n            key: \"componentDidMount\",\n            value: function componentDidMount() {\n                this.props.onMount && this.props.onMount(this);\n            }\n        },\n        {\n            key: \"getID\",\n            value: function getID(url) {\n                if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n                    return null;\n                }\n                return url.match(_patterns.MATCH_URL_YOUTUBE)[1];\n            }\n        },\n        {\n            key: \"load\",\n            value: function load(url, isReady) {\n                var _this2 = this;\n                var _this$props2 = this.props, playing = _this$props2.playing, muted = _this$props2.muted, playsinline = _this$props2.playsinline, controls = _this$props2.controls, loop = _this$props2.loop, config = _this$props2.config, _onError = _this$props2.onError;\n                var playerVars = config.playerVars, embedOptions = config.embedOptions;\n                var id = this.getID(url);\n                if (isReady) {\n                    if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n                        this.player.loadPlaylist(this.parsePlaylist(url));\n                        return;\n                    }\n                    this.player.cueVideoById({\n                        videoId: id,\n                        startSeconds: (0, _utils.parseStartTime)(url) || playerVars.start,\n                        endSeconds: (0, _utils.parseEndTime)(url) || playerVars.end\n                    });\n                    return;\n                }\n                (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(YT) {\n                    return YT.loaded;\n                }).then(function(YT) {\n                    if (!_this2.container) return;\n                    _this2.player = new YT.Player(_this2.container, _objectSpread({\n                        width: \"100%\",\n                        height: \"100%\",\n                        videoId: id,\n                        playerVars: _objectSpread(_objectSpread({\n                            autoplay: playing ? 1 : 0,\n                            mute: muted ? 1 : 0,\n                            controls: controls ? 1 : 0,\n                            start: (0, _utils.parseStartTime)(url),\n                            end: (0, _utils.parseEndTime)(url),\n                            origin: window.location.origin,\n                            playsinline: playsinline ? 1 : 0\n                        }, _this2.parsePlaylist(url)), playerVars),\n                        events: {\n                            onReady: function onReady() {\n                                if (loop) {\n                                    _this2.player.setLoop(true); // Enable playlist looping\n                                }\n                                _this2.props.onReady();\n                            },\n                            onPlaybackRateChange: function onPlaybackRateChange(event) {\n                                return _this2.props.onPlaybackRateChange(event.data);\n                            },\n                            onPlaybackQualityChange: function onPlaybackQualityChange(event) {\n                                return _this2.props.onPlaybackQualityChange(event);\n                            },\n                            onStateChange: _this2.onStateChange,\n                            onError: function onError(event) {\n                                return _onError(event.data);\n                            }\n                        },\n                        host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined\n                    }, embedOptions));\n                }, _onError);\n                if (embedOptions.events) {\n                    console.warn(\"Using `embedOptions.events` will likely break things. Use ReactPlayer’s callback props instead, eg onReady, onPlay, onPause\");\n                }\n            }\n        },\n        {\n            key: \"play\",\n            value: function play() {\n                this.callPlayer(\"playVideo\");\n            }\n        },\n        {\n            key: \"pause\",\n            value: function pause() {\n                this.callPlayer(\"pauseVideo\");\n            }\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                if (!document.body.contains(this.callPlayer(\"getIframe\"))) return;\n                this.callPlayer(\"stopVideo\");\n            }\n        },\n        {\n            key: \"seekTo\",\n            value: function seekTo(amount) {\n                var keepPlaying = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n                this.callPlayer(\"seekTo\", amount);\n                if (!keepPlaying && !this.props.playing) {\n                    this.pause();\n                }\n            }\n        },\n        {\n            key: \"setVolume\",\n            value: function setVolume(fraction) {\n                this.callPlayer(\"setVolume\", fraction * 100);\n            }\n        },\n        {\n            key: \"setPlaybackRate\",\n            value: function setPlaybackRate(rate) {\n                this.callPlayer(\"setPlaybackRate\", rate);\n            }\n        },\n        {\n            key: \"setLoop\",\n            value: function setLoop(loop) {\n                this.callPlayer(\"setLoop\", loop);\n            }\n        },\n        {\n            key: \"getDuration\",\n            value: function getDuration() {\n                return this.callPlayer(\"getDuration\");\n            }\n        },\n        {\n            key: \"getCurrentTime\",\n            value: function getCurrentTime() {\n                return this.callPlayer(\"getCurrentTime\");\n            }\n        },\n        {\n            key: \"getSecondsLoaded\",\n            value: function getSecondsLoaded() {\n                return this.callPlayer(\"getVideoLoadedFraction\") * this.getDuration();\n            }\n        },\n        {\n            key: \"render\",\n            value: function render() {\n                var display = this.props.display;\n                var style = {\n                    width: \"100%\",\n                    height: \"100%\",\n                    display: display\n                };\n                return /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    style: style\n                }, /*#__PURE__*/ _react[\"default\"].createElement(\"div\", {\n                    ref: this.ref\n                }));\n            }\n        }\n    ]);\n    return YouTube;\n}(_react.Component);\nexports[\"default\"] = YouTube;\n_defineProperty(YouTube, \"displayName\", \"YouTube\");\n_defineProperty(YouTube, \"canPlay\", _patterns.canPlay.youtube);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/YouTube.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/players/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-player/lib/players/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"(ssr)/./node_modules/react-player/lib/utils.js\");\nvar _patterns = __webpack_require__(/*! ../patterns */ \"(ssr)/./node_modules/react-player/lib/patterns.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar _default = [\n    {\n        key: \"youtube\",\n        name: \"YouTube\",\n        canPlay: _patterns.canPlay.youtube,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./YouTube */ \"(ssr)/./node_modules/react-player/lib/players/YouTube.js\"));\n            });\n        })\n    },\n    {\n        key: \"soundcloud\",\n        name: \"SoundCloud\",\n        canPlay: _patterns.canPlay.soundcloud,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./SoundCloud */ \"(ssr)/./node_modules/react-player/lib/players/SoundCloud.js\"));\n            });\n        })\n    },\n    {\n        key: \"vimeo\",\n        name: \"Vimeo\",\n        canPlay: _patterns.canPlay.vimeo,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Vimeo */ \"(ssr)/./node_modules/react-player/lib/players/Vimeo.js\"));\n            });\n        })\n    },\n    {\n        key: \"facebook\",\n        name: \"Facebook\",\n        canPlay: _patterns.canPlay.facebook,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Facebook */ \"(ssr)/./node_modules/react-player/lib/players/Facebook.js\"));\n            });\n        })\n    },\n    {\n        key: \"streamable\",\n        name: \"Streamable\",\n        canPlay: _patterns.canPlay.streamable,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Streamable */ \"(ssr)/./node_modules/react-player/lib/players/Streamable.js\"));\n            });\n        })\n    },\n    {\n        key: \"wistia\",\n        name: \"Wistia\",\n        canPlay: _patterns.canPlay.wistia,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Wistia */ \"(ssr)/./node_modules/react-player/lib/players/Wistia.js\"));\n            });\n        })\n    },\n    {\n        key: \"twitch\",\n        name: \"Twitch\",\n        canPlay: _patterns.canPlay.twitch,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Twitch */ \"(ssr)/./node_modules/react-player/lib/players/Twitch.js\"));\n            });\n        })\n    },\n    {\n        key: \"dailymotion\",\n        name: \"DailyMotion\",\n        canPlay: _patterns.canPlay.dailymotion,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./DailyMotion */ \"(ssr)/./node_modules/react-player/lib/players/DailyMotion.js\"));\n            });\n        })\n    },\n    {\n        key: \"mixcloud\",\n        name: \"Mixcloud\",\n        canPlay: _patterns.canPlay.mixcloud,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Mixcloud */ \"(ssr)/./node_modules/react-player/lib/players/Mixcloud.js\"));\n            });\n        })\n    },\n    {\n        key: \"vidyard\",\n        name: \"Vidyard\",\n        canPlay: _patterns.canPlay.vidyard,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Vidyard */ \"(ssr)/./node_modules/react-player/lib/players/Vidyard.js\"));\n            });\n        })\n    },\n    {\n        key: \"kaltura\",\n        name: \"Kaltura\",\n        canPlay: _patterns.canPlay.kaltura,\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./Kaltura */ \"(ssr)/./node_modules/react-player/lib/players/Kaltura.js\"));\n            });\n        })\n    },\n    {\n        key: \"file\",\n        name: \"FilePlayer\",\n        canPlay: _patterns.canPlay.file,\n        canEnablePIP: function canEnablePIP(url) {\n            return _patterns.canPlay.file(url) && (document.pictureInPictureEnabled || (0, _utils.supportsWebKitPresentationMode)()) && !_patterns.AUDIO_EXTENSIONS.test(url);\n        },\n        lazyPlayer: /*#__PURE__*/ (0, _react.lazy)(function() {\n            return Promise.resolve().then(function() {\n                return _interopRequireWildcard(__webpack_require__(/*! ./FilePlayer */ \"(ssr)/./node_modules/react-player/lib/players/FilePlayer.js\"));\n            });\n        })\n    }\n];\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/players/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/props.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/props.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.defaultProps = exports.propTypes = void 0;\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nvar string = _propTypes[\"default\"].string, bool = _propTypes[\"default\"].bool, number = _propTypes[\"default\"].number, array = _propTypes[\"default\"].array, oneOfType = _propTypes[\"default\"].oneOfType, shape = _propTypes[\"default\"].shape, object = _propTypes[\"default\"].object, func = _propTypes[\"default\"].func, node = _propTypes[\"default\"].node;\nvar propTypes = {\n    url: oneOfType([\n        string,\n        array,\n        object\n    ]),\n    playing: bool,\n    loop: bool,\n    controls: bool,\n    volume: number,\n    muted: bool,\n    playbackRate: number,\n    width: oneOfType([\n        string,\n        number\n    ]),\n    height: oneOfType([\n        string,\n        number\n    ]),\n    style: object,\n    progressInterval: number,\n    playsinline: bool,\n    pip: bool,\n    stopOnUnmount: bool,\n    light: oneOfType([\n        bool,\n        string,\n        object\n    ]),\n    playIcon: node,\n    previewTabIndex: number,\n    fallback: node,\n    oEmbedUrl: string,\n    wrapper: oneOfType([\n        string,\n        func,\n        shape({\n            render: func.isRequired\n        })\n    ]),\n    config: shape({\n        soundcloud: shape({\n            options: object\n        }),\n        youtube: shape({\n            playerVars: object,\n            embedOptions: object,\n            onUnstarted: func\n        }),\n        facebook: shape({\n            appId: string,\n            version: string,\n            playerId: string,\n            attributes: object\n        }),\n        dailymotion: shape({\n            params: object\n        }),\n        vimeo: shape({\n            playerOptions: object,\n            title: string\n        }),\n        file: shape({\n            attributes: object,\n            tracks: array,\n            forceVideo: bool,\n            forceAudio: bool,\n            forceHLS: bool,\n            forceSafariHLS: bool,\n            forceDisableHls: bool,\n            forceDASH: bool,\n            forceFLV: bool,\n            hlsOptions: object,\n            hlsVersion: string,\n            dashVersion: string,\n            flvVersion: string\n        }),\n        wistia: shape({\n            options: object,\n            playerId: string,\n            customControls: array\n        }),\n        mixcloud: shape({\n            options: object\n        }),\n        twitch: shape({\n            options: object,\n            playerId: string\n        }),\n        vidyard: shape({\n            options: object\n        })\n    }),\n    onReady: func,\n    onStart: func,\n    onPlay: func,\n    onPause: func,\n    onBuffer: func,\n    onBufferEnd: func,\n    onEnded: func,\n    onError: func,\n    onDuration: func,\n    onSeek: func,\n    onPlaybackRateChange: func,\n    onPlaybackQualityChange: func,\n    onProgress: func,\n    onClickPreview: func,\n    onEnablePIP: func,\n    onDisablePIP: func\n};\nexports.propTypes = propTypes;\nvar noop = function noop() {};\nvar defaultProps = {\n    playing: false,\n    loop: false,\n    controls: false,\n    volume: null,\n    muted: false,\n    playbackRate: 1,\n    width: \"640px\",\n    height: \"360px\",\n    style: {},\n    progressInterval: 1000,\n    playsinline: false,\n    pip: false,\n    stopOnUnmount: true,\n    light: false,\n    fallback: null,\n    wrapper: \"div\",\n    previewTabIndex: 0,\n    oEmbedUrl: \"https://noembed.com/embed?url={url}\",\n    config: {\n        soundcloud: {\n            options: {\n                visual: true,\n                // Undocumented, but makes player fill container and look better\n                buying: false,\n                liking: false,\n                download: false,\n                sharing: false,\n                show_comments: false,\n                show_playcount: false\n            }\n        },\n        youtube: {\n            playerVars: {\n                playsinline: 1,\n                showinfo: 0,\n                rel: 0,\n                iv_load_policy: 3,\n                modestbranding: 1\n            },\n            embedOptions: {},\n            onUnstarted: noop\n        },\n        facebook: {\n            appId: \"1309697205772819\",\n            version: \"v3.3\",\n            playerId: null,\n            attributes: {}\n        },\n        dailymotion: {\n            params: {\n                api: 1,\n                \"endscreen-enable\": false\n            }\n        },\n        vimeo: {\n            playerOptions: {\n                autopause: false,\n                byline: false,\n                portrait: false,\n                title: false\n            },\n            title: null\n        },\n        file: {\n            attributes: {},\n            tracks: [],\n            forceVideo: false,\n            forceAudio: false,\n            forceHLS: false,\n            forceDASH: false,\n            forceFLV: false,\n            hlsOptions: {},\n            hlsVersion: \"1.1.4\",\n            dashVersion: \"3.1.3\",\n            flvVersion: \"1.5.0\",\n            forceDisableHls: false\n        },\n        wistia: {\n            options: {},\n            playerId: null,\n            customControls: null\n        },\n        mixcloud: {\n            options: {\n                hide_cover: 1\n            }\n        },\n        twitch: {\n            options: {},\n            playerId: null\n        },\n        vidyard: {\n            options: {}\n        }\n    },\n    onReady: noop,\n    onStart: noop,\n    onPlay: noop,\n    onPause: noop,\n    onBuffer: noop,\n    onBufferEnd: noop,\n    onEnded: noop,\n    onError: noop,\n    onDuration: noop,\n    onSeek: noop,\n    onPlaybackRateChange: noop,\n    onPlaybackQualityChange: noop,\n    onProgress: noop,\n    onClickPreview: noop,\n    onEnablePIP: noop,\n    onDisablePIP: noop\n};\nexports.defaultProps = defaultProps;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/props.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-player/lib/utils.js":
/*!************************************************!*\
  !*** ./node_modules/react-player/lib/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseStartTime = parseStartTime;\nexports.parseEndTime = parseEndTime;\nexports.randomString = randomString;\nexports.queryString = queryString;\nexports.getSDK = getSDK;\nexports.getConfig = getConfig;\nexports.omit = omit;\nexports.callPlayer = callPlayer;\nexports.isMediaStream = isMediaStream;\nexports.isBlobUrl = isBlobUrl;\nexports.supportsWebKitPresentationMode = supportsWebKitPresentationMode;\nvar _loadScript = _interopRequireDefault(__webpack_require__(/*! load-script */ \"(ssr)/./node_modules/load-script/index.js\"));\nvar _deepmerge = _interopRequireDefault(__webpack_require__(/*! deepmerge */ \"(ssr)/./node_modules/deepmerge/dist/cjs.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;\nvar MATCH_END_QUERY = /[?&#]end=([0-9hms]+)/;\nvar MATCH_START_STAMP = /(\\d+)(h|m|s)/g;\nvar MATCH_NUMERIC = /^\\d+$/; // Parse YouTube URL for a start time param, ie ?t=1h14m30s\n// and return the start time in seconds\nfunction parseTimeParam(url, pattern) {\n    if (url instanceof Array) {\n        return undefined;\n    }\n    var match = url.match(pattern);\n    if (match) {\n        var stamp = match[1];\n        if (stamp.match(MATCH_START_STAMP)) {\n            return parseTimeString(stamp);\n        }\n        if (MATCH_NUMERIC.test(stamp)) {\n            return parseInt(stamp);\n        }\n    }\n    return undefined;\n}\nfunction parseTimeString(stamp) {\n    var seconds = 0;\n    var array = MATCH_START_STAMP.exec(stamp);\n    while(array !== null){\n        var _array = array, _array2 = _slicedToArray(_array, 3), count = _array2[1], period = _array2[2];\n        if (period === \"h\") seconds += parseInt(count, 10) * 60 * 60;\n        if (period === \"m\") seconds += parseInt(count, 10) * 60;\n        if (period === \"s\") seconds += parseInt(count, 10);\n        array = MATCH_START_STAMP.exec(stamp);\n    }\n    return seconds;\n}\nfunction parseStartTime(url) {\n    return parseTimeParam(url, MATCH_START_QUERY);\n}\nfunction parseEndTime(url) {\n    return parseTimeParam(url, MATCH_END_QUERY);\n} // http://stackoverflow.com/a/38622545\nfunction randomString() {\n    return Math.random().toString(36).substr(2, 5);\n}\nfunction queryString(object) {\n    return Object.keys(object).map(function(key) {\n        return \"\".concat(key, \"=\").concat(object[key]);\n    }).join(\"&\");\n}\nfunction getGlobal(key) {\n    if (window[key]) {\n        return window[key];\n    }\n    if (window.exports && window.exports[key]) {\n        return window.exports[key];\n    }\n    if (window.module && window.module.exports && window.module.exports[key]) {\n        return window.module.exports[key];\n    }\n    return null;\n} // Util function to load an external SDK\n// or return the SDK if it is already loaded\nvar requests = {};\nfunction getSDK(url, sdkGlobal) {\n    var sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function() {\n        return true;\n    };\n    var fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _loadScript[\"default\"];\n    var existingGlobal = getGlobal(sdkGlobal);\n    if (existingGlobal && isLoaded(existingGlobal)) {\n        return Promise.resolve(existingGlobal);\n    }\n    return new Promise(function(resolve, reject) {\n        // If we are already loading the SDK, add the resolve and reject\n        // functions to the existing array of requests\n        if (requests[url]) {\n            requests[url].push({\n                resolve: resolve,\n                reject: reject\n            });\n            return;\n        }\n        requests[url] = [\n            {\n                resolve: resolve,\n                reject: reject\n            }\n        ];\n        var onLoaded = function onLoaded(sdk) {\n            // When loaded, resolve all pending request promises\n            requests[url].forEach(function(request) {\n                return request.resolve(sdk);\n            });\n        };\n        if (sdkReady) {\n            var previousOnReady = window[sdkReady];\n            window[sdkReady] = function() {\n                if (previousOnReady) previousOnReady();\n                onLoaded(getGlobal(sdkGlobal));\n            };\n        }\n        fetchScript(url, function(err) {\n            if (err) {\n                // Loading the SDK failed – reject all requests and\n                // reset the array of requests for this SDK\n                requests[url].forEach(function(request) {\n                    return request.reject(err);\n                });\n                requests[url] = null;\n            } else if (!sdkReady) {\n                onLoaded(getGlobal(sdkGlobal));\n            }\n        });\n    });\n}\nfunction getConfig(props, defaultProps) {\n    return (0, _deepmerge[\"default\"])(defaultProps.config, props.config);\n}\nfunction omit(object) {\n    var _ref;\n    for(var _len = arguments.length, arrays = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        arrays[_key - 1] = arguments[_key];\n    }\n    var omitKeys = (_ref = []).concat.apply(_ref, arrays);\n    var output = {};\n    var keys = Object.keys(object);\n    for(var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++){\n        var key = _keys[_i2];\n        if (omitKeys.indexOf(key) === -1) {\n            output[key] = object[key];\n        }\n    }\n    return output;\n}\nfunction callPlayer(method) {\n    var _this$player;\n    // Util method for calling a method on this.player\n    // but guard against errors and console.warn instead\n    if (!this.player || !this.player[method]) {\n        var message = \"ReactPlayer: \".concat(this.constructor.displayName, \" player could not call %c\").concat(method, \"%c – \");\n        if (!this.player) {\n            message += \"The player was not available\";\n        } else if (!this.player[method]) {\n            message += \"The method was not available\";\n        }\n        console.warn(message, \"font-weight: bold\", \"\");\n        return null;\n    }\n    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n        args[_key2 - 1] = arguments[_key2];\n    }\n    return (_this$player = this.player)[method].apply(_this$player, args);\n}\nfunction isMediaStream(url) {\n    return  false && 0;\n}\nfunction isBlobUrl(url) {\n    return /^blob:/.test(url);\n}\nfunction supportsWebKitPresentationMode() {\n    var video = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.createElement(\"video\");\n    // Check if Safari supports PiP, and is not on mobile (other than iPad)\n    // iPhone safari appears to \"support\" PiP through the check, however PiP does not function\n    var notMobile = /iPhone|iPod/.test(navigator.userAgent) === false;\n    return video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === \"function\" && notMobile;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-player/lib/utils.js\n");

/***/ })

};
;